from rest_framework_simplejwt.serializers import TokenObtainPairSerializer

from rest_framework import serializers
from django.contrib.auth.models import User
from rest_framework.validators import UniqueValidator
from django.contrib.auth.password_validation import validate_password

from django.core.validators import EmailValidator
from django.core.exceptions import ObjectDoesNotExist
from .tasks import password_reset_successfull, send_password_reset_otp

from django.utils.http import urlsafe_base64_decode
from django.utils.encoding import force_bytes
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from rest_framework.exceptions import AuthenticationFailed
from django.utils.translation import gettext_lazy as _

import logging

logger = logging.getLogger(__name__)


class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    """
    Return a token containing the user's username in addition to the default token generated by the parent class.

    :param user: The user object for which the token is being generated.
    :return: A token containing the user's username.
    """

    @classmethod
    def get_token(cls, user):
        """
        Return a token containing the user's username in addition to the default token generated by the parent class.

        :param user: The user object for which the token is being generated.
        :return: A token containing the user's username.
        """
        token = super().get_token(user)
        token["username"] = user.username
        return token

    def validate(self, attrs):
        """
        Validate the input attributes by calling the parent class's validate method and handling any AuthenticationFailed exception that may occur.

        :param attrs: A dictionary containing the input attributes to be validated.
        :return: The validated data dictionary.
        """
        try:
            data = super().validate(attrs)
        except AuthenticationFailed as e:
            raise AuthenticationFailed(
                detail=_(
                    "Invalid credentials, please check your username and password."
                ),
                code="authentication",
            )

        return data


class GetUserDataSerializer(serializers.ModelSerializer):
    """
    Serializer class for retrieving user data with specified fields.

    Attributes:
        model: The User model from which the data will be retrieved.
        fields: The fields to be included in the serialized data, including id, username, email, first_name, and last_name.
    """

    class Meta:
        model = User
        fields = (
            "id",
            "username",
            "email",
            "first_name",
            "last_name",
        )


class RegisterSerializer(serializers.ModelSerializer):
    """
    Serializer for user registration.

    Attributes:
        email (EmailField): Email field for user registration.
        password (CharField): Password field for user registration.
        password2 (CharField): Confirm password field for user registration.

    Methods:
        validate(self, attrs): Validate the input data for user registration.
        create(self, validated_data): Create a new user with the validated data.
    """

    email = serializers.EmailField(
        required=True, validators=[UniqueValidator(queryset=User.objects.all())]
    )
    password = serializers.CharField(
        write_only=True, required=True, validators=[validate_password]
    )
    password2 = serializers.CharField(write_only=True, required=True)

    class Meta:
        """
        Class Meta for RegisterSerializer.

        Attributes:
            model: The User model for which the serializer is being defined.
            fields: The fields to be included in the serialized data, including username, password, password2, email, first_name, and last_name.
            extra_kwargs: Additional keyword arguments for customizing the behavior of certain fields, such as 'first_name' being required and 'last_name' allowing blank values.

        This class is used to define metadata options for the RegisterSerializer class.
        """

        model = User
        fields = (
            "username",
            "password",
            "password2",
            "email",
            "first_name",
            "last_name",
        )
        extra_kwargs = {
            "first_name": {"required": True},
            "last_name": {"required": False, "allow_blank": True},
        }

    def validate(self, attrs):
        """
        Validate the input data for user registration.

        Parameters:
            attrs (dict): A dictionary containing the input data for user registration, including 'password', 'password2', 'username', and 'email'.

        Raises:
            serializers.ValidationError: If the 'password' and 'password2' fields do not match, or if a user with the same 'username' or 'email' already exists.

        Returns:
            dict: The validated input data for user registration.

        """
        if attrs["password"] != attrs["password2"]:
            logger.error("Password fields didn't match.")
            raise serializers.ValidationError(
                {
                    "Password Mismatch": "Password & Confirm password fields didn't match."
                }
            )

        if User.objects.filter(username=attrs["username"]).exists():
            logger.error(f"A user with username {attrs['username']} already exists.")
            raise serializers.ValidationError(
                {"User Name": "A user with that username already exists."}
            )

        if User.objects.filter(email=attrs["email"]).exists():
            logger.error(f"A user with email {attrs['email']} already exists.")
            raise serializers.ValidationError(
                {"Email": "A user with that email already exists."}
            )

        return attrs

    def create(self, validated_data):
        """
        Create a new user with the validated data.

        Parameters:
            validated_data (dict): A dictionary containing the validated data for user registration, including 'username', 'email', 'first_name', and 'last_name'.

        Returns:
            User: The newly created User object.

        """
        user = User.objects.create(
            username=validated_data["username"],
            email=validated_data["email"],
            first_name=validated_data["first_name"],
            last_name=validated_data.get("last_name", ""),
        )

        user.set_password(validated_data["password"])
        user.save()

        logger.info(f"User {user.username} created successfully.")
        return user


class ChangePasswordSerializer(serializers.Serializer):
    """
    Serializer for changing user password.

    Attributes:
        old_password (str): The old password of the user.
        new_password (str): The new password to be set for the user.
        confirm_password (str): The confirmation of the new password.

    Methods:
        validate_old_password: Validates the old password provided by the user.
        validate: Validates if the new password and confirm password match.
        save: Saves the new password for the user and logs the password change.
    """

    old_password = serializers.CharField(required=True, write_only=True)
    new_password = serializers.CharField(required=True, write_only=True)
    confirm_password = serializers.CharField(required=True, write_only=True)

    def validate_old_password(self, value):
        """
        Validates the old password provided by the user.

        Parameters:
            value (str): The old password provided by the user.

        Returns:
            str: The validated old password.

        Raises:
            serializers.ValidationError: If the old password provided by the user is incorrect.
        """
        user = self.context["request"].user
        if not user.check_password(value):
            logger.error("Old password is not correct.")
            raise serializers.ValidationError(
                {"Old Password": "Old password is not correct"}
            )
        return value

    def validate(self, data):
        """
        Validates if the new password and confirm password match.

        Parameters:
            data (dict): A dictionary containing the new password and confirm password.

        Returns:
            dict: The validated data dictionary.

        Raises:
            serializers.ValidationError: If the new password and confirm password do not match.
        """
        if data["new_password"] != data["confirm_password"]:
            logger.error("New passwords do not match.")
            raise serializers.ValidationError(
                {"Password Mismatch": "New & Confirm passwords do not match"}
            )
        return data

    def save(self, **kwargs):
        """
        Saves the new password for the user and logs the password change.

        Parameters:
            **kwargs: Additional keyword arguments that can be passed.

        Returns:
            User: The user object with the updated password.

        Raises:
            N/A
        """
        user = self.context["request"].user
        user.set_password(self.validated_data["new_password"])
        user.save()
        logger.info(f"User {user.username} changed their password successfully.")
        return user


class UpdateUserSerializer(serializers.ModelSerializer):
    """
    Class UpdateUserSerializer(serializers.ModelSerializer):
        Serializer for updating user information.

        Attributes:
            email (EmailField): Email field for user information update.

        Meta:
            model: The User model for which the serializer is being defined.
            fields: The fields to be included in the serialized data, including username, first_name, last_name, and email.
            extra_kwargs: Additional keyword arguments for customizing the behavior of certain fields, such as 'first_name' and 'last_name' being required.

        Methods:
            validate_email(self, value): Validate the email field to ensure it is not already in use.
            validate_username(self, value): Validate the username field to ensure it is not already in use.
            update(self, instance, validated_data): Update the user instance with the validated data.

        This class is used to serialize and update user information.
    """

    email = serializers.EmailField(required=True)

    class Meta:
        """
        Class Meta:
            Define metadata options for the UpdateUserSerializer class.

            Attributes:
                model: The User model for which the serializer is being defined.
                fields: The fields to be included in the serialized data, including username, first_name, last_name, and email.
                extra_kwargs: Additional keyword arguments for customizing the behavior of certain fields, such as 'first_name' being required and 'last_name' being required.

            This class is used to define metadata options for the UpdateUserSerializer class.
        """

        model = User
        fields = ("username", "first_name", "last_name", "email")
        extra_kwargs = {
            "first_name": {"required": True},
            "last_name": {"required": True},
        }

    def validate_email(self, value):
        """
        Validate the email field to ensure it is not already in use.

        Parameters:
            value (str): The email value to be validated.

        Returns:
            str: The validated email value.

        Raises:
            serializers.ValidationError: If the email is already in use by another user.

        This method checks if the provided email value is already associated with another user in the database. If the email is already in use, a validation error is raised. Otherwise, the email value is considered valid and returned.
        """
        user = self.context["request"].user
        if User.objects.exclude(pk=user.pk).filter(email=value).exists():
            raise serializers.ValidationError(
                {"Email": "This email is already in use."}
            )
        return value

    def validate_username(self, value):
        """
        Validate the username field to ensure it is not already in use.

        Parameters:
            value (str): The username value to be validated.

        Returns:
            str: The validated username value.

        Raises:
            serializers.ValidationError: If the username is already in use by another user.

        This method checks if the provided username value is already associated with another user in the database. If the username is already in use, a validation error is raised. Otherwise, the username value is considered valid and returned.
        """
        user = self.context["request"].user
        if User.objects.exclude(pk=user.pk).filter(username=value).exists():
            raise serializers.ValidationError(
                {"User Name": "This username is already in use."}
            )
        return value

    def update(self, instance, validated_data):
        """
        Update the user instance with the validated data.

        Parameters:
            instance: The user instance to be updated.
            validated_data: The validated data to update the user instance.

        Returns:
            The updated user instance.

        Raises:
            serializers.ValidationError: If the requesting user does not have permission to update the user instance.

        This method updates the user instance with the validated data provided. It first checks if the requesting user has permission to update the user instance by comparing their primary keys. If the requesting user does not have permission, a validation error is raised. Otherwise, the user instance is updated with the new data and saved.
        """
        user = self.context["request"].user

        if user.pk != instance.pk:
            raise serializers.ValidationError(
                {"Authorize": "You don't have permission for this user."}
            )

        instance.first_name = validated_data.get("first_name", instance.first_name)
        instance.last_name = validated_data.get("last_name", instance.last_name)
        instance.email = validated_data.get("email", instance.email)
        instance.username = validated_data.get("username", instance.username)

        instance.save()

        return instance


class PasswordResetSerializer(serializers.Serializer):
    """
    Serializer for handling password reset requests.

    Attributes:
        email: EmailField - Field for user email input.

    Methods:
        validate_email: Method to validate if the user with the provided email exists.
        send_otp_email: Method to send OTP email for password reset.
    """

    email = serializers.EmailField(validators=[EmailValidator()])

    def validate_email(self, value):
        """
        Validate the email field to ensure it is associated with an existing user.

        Parameters:
            value (str): The email value to be validated.

        Returns:
            str: The validated email value.

        Raises:
            serializers.ValidationError: If no user is found with the provided email.

        This method queries the User model to check if a user exists with the provided email value. If no user is found, a validation error is raised indicating that the user with the email does not exist. Otherwise, the email value is considered valid and returned.
        """
        try:
            user = User.objects.get(email=value)
        except ObjectDoesNotExist:
            raise serializers.ValidationError("User with this email does not exist.")
        return value

    def send_otp_email(self, user, otp):
        send_password_reset_otp(user.email, otp)


class PasswordResetConfirmSerializer(serializers.Serializer):
    """
Serializer for confirming password reset with OTP.

Attributes:
    email (EmailField): The email of the user requesting password reset.
    otp (CharField): The OTP entered by the user for verification.
    new_password1 (CharField): The new password entered by the user.
    new_password2 (CharField): The confirmation of the new password entered by the user.

Methods:
    validate(self, attrs): Validates the input data and checks OTP, email, and password match.
    save(self): Saves the new password for the user and clears the session data after successful reset.
""" """
Saves the new password for the user and clears the session data after successful reset.

Parameters:
    None

Returns:
    None
"""

    email = serializers.EmailField()
    otp = serializers.CharField()
    new_password1 = serializers.CharField()
    new_password2 = serializers.CharField()

    def validate(self, attrs):
        request = self.context.get("request")

        email = attrs.get("email")
        otp = attrs.get("otp")

        # Check if the OTP matches the one in the session
        session_otp = request.session.get("reset_otp")
        session_email = request.session.get("reset_email")

        if session_otp != otp or session_email != email:
            raise ValidationError("Invalid OTP or email")

        if attrs["new_password1"] != attrs["new_password2"]:
            raise ValidationError("The two password fields did not match")

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            raise ValidationError("User does not exist")

        attrs["user"] = user
        return attrs

    def save(self):
        """
        Saves the new password for the user and clears the session data after successful reset.

        Parameters:
            None

        Returns:
            None
        """
        user = self.validated_data["user"]
        new_password = self.validated_data["new_password1"]
        user.set_password(new_password)
        user.save()
        # Clear the session data after successful password reset
        request = self.context.get("request")
        request.session.pop("reset_otp", None)
        request.session.pop("reset_email", None)
        password_reset_successfull(user.email)
